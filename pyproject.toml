[build-system]
requires = ["setuptools >= 64"]
build-backend = "setuptools.build_meta"

[project]
name = "checkers"
dynamic = ["version"]
authors = [
  { name="CoolCat467" },
]
description = "Graphical Checkers Game with AI support"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
keywords = ["ai", "two-player", "checkers", "single-player", "checkers-game", "ai-support", "networked-game"]
dependencies = [
    "pygame~=2.5.2",
    "typing_extensions",
    "trio>=0.23.1",
]

[tool.setuptools.dynamic]
version = {attr = "checkers.game.__version__"}

[project.urls]
"Homepage" = "https://github.com/CoolCat467/Checkers"
"Source" = "https://github.com/CoolCat467/Checkers"
"Bug Tracker" = "https://github.com/CoolCat467/Checkers/issues"

[tool.setuptools.package-data]
checkers = ["py.typed", "data/*"]

[project.scripts]
checkers_game = "checkers.game:cli_run"

[tool.pytest.ini_options]
addopts = "--cov-report term-missing --cov=checkers"
testpaths = [
    "tests",
]

[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_column_numbers = true
show_error_codes = true
show_traceback = true
strict = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.black]
line-length = 79
target-version = ['py312']

[tool.ruff.isort]
combine-as-imports = true

[tool.pycln]
all = true
disable_all_dunder_policy = true

[tool.ruff]
line-length = 79
fix = true

include = ["*.py", "*.pyi", "**/pyproject.toml"]
select = [
    "A",  # flake8-builtins
    "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM",  # flake8-commas
    "D",  # pydocstyle
    "E",  # Error
    "EXE",  # flake8-executable
    "F",  # pyflakes
    "FA",  # flake8-future-annotations
    "I",  # isort
    "N",  # pep8-naming
    "PIE",  # flake8-pie
    "PT",  # flake8-pytest-style
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLOT",  # flake8-slots
    "TCH",  # flake8-type-checking
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT",  # flake8-2020
]
extend-ignore = [
    'E501',  # line-too-long
    "S101",  # use of assert for tests and type narrowing
    'PYI041',  # redundant-numeric-union
]

[tool.ruff.per-file-ignores]
"src/checkers/__init__.py" = ['F401', 'E402']

[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = py310, py311, py312, pytest, mypy
    isolated_build = false

    [gh-actions]
    python =
        3.10: py310, pytest
        3.11: py311, pytest
        3.12: py312, pytest, mypy

    [testenv]
    setenv =
        PYTHONPATH = {toxinidir}

    [testenv:pytest]
    deps =
        pytest
        pytest-cov
        pytest-trio
    commands = pytest --basetemp={envtmpdir}

    [testenv:mypy]
    deps =
        mypy
    commands = mypy src
"""
